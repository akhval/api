# this is a prototype of the new Espacent in OPS API in YAML format
swagger: '2.0'
info:
  title: OPS Espacenet Services API
  description: New Espacenet OPS hosted services
  version: "3.3.2"
# the domain of the service
host: ops-t.internal.epo.org
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
basePath: /3.2/rest-services
paths:
  /images/{path}:
    get:
      summary: Proxy all moses GET requests
      description: The Moses endpoint acts like transparent proxy proviting authorization only facilities and returns information from Moses exactly the same way it presents there.
      produces:
        - application/json
        - text/plain
        - image/tiff
        - image/png
        - application/pdf
        - application/zip   
        - application/octet-stream
      parameters:
        - name: path
          in: path
          description: Any Moses path parameter
          required: true
          type: string
          format: string
        - name: query
          in: query
          description: Any Moses query parameter
          required: false
          type: string
          format: string 
        - name: header
          in: header
          description: Any Moses header parameter
          required: false
          type: string
          format: string           
      tags:
        - Images
        - Proxy
      responses:
        200:
          description: A response
          schema:
            type: string
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'            
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'            
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'            
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'  
        503:
          description: Service Unavailable
          schema:
            $ref: '#/definitions/Error'              
    post:
      summary: Proxy all moses POST requests
      description: The Moses endpoint acts like transparent proxy proviting authorization only facilities and returns information from Moses exactly the same way it presents there.
      produces:
        - application/json
        - text/plain
        - image/tiff
        - image/png
        - application/pdf
        - application/zip   
        - application/octet-stream
      consumes:
        - application/json
      parameters:
        - name: path
          in: path
          description: Any Moses path parameter
          required: true
          type: string
          format: string
        - name: query
          in: query
          description: Any Moses query parameter
          required: false
          type: string
          format: string 
        - name: header
          in: header
          description: Any Moses header parameter
          required: false
          type: string
          format: string  
        - name: body
          in: body
          description: Any Moses post payload
          required: true
          schema:
            type: string
          
      tags:
        - Images
        - Proxy
      responses:
        200:
          description: A response
          schema:
            type: string
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'            
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'            
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/Error'            
        500:
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Error'  
        503:
          description: Service Unavailable
          schema:
            $ref: '#/definitions/Error'              
  /query/convert:
    get:
      description: Converts a query string of type CQL into PQL format.
      produces:
        - application/json
        - application/xml
        - text/plain
      parameters:
        - name: q
          in: query
          description: Query string that should be evaluated and converted
          required: true
          type: string
        - name: inputFormat
          in: query
          description: Input format of the query string.
          required: true
          type: string
          enum: [cql]  
        - name: outputFormat
          in: query
          description: Output format the query should be converted into. See known formats.
          required: true
          type: string
          enum: [pql]
      tags:
        - Query
      responses:
        "200":
          description: Success
          schema:
            type: string

definitions:
  Error:
    type: string